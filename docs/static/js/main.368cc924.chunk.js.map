{"version":3,"sources":["services/spreadsheet/outTable.jsx","services/spreadsheet/dragDropFile.jsx","services/spreadsheet/dataInput.jsx","services/spreadsheet/spreadsheet.jsx","services/plot/plot.jsx","App.jsx","index.js"],"names":["OutTable","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","a","createElement","className","cols","map","c","key","name","data","r","i","React","Component","DragDropFile","onDrop","bind","assertThisInitialized","evt","stopPropagation","preventDefault","files","dataTransfer","handleFile","onDragEnter","suppress","onDragOver","children","DataInput","handleChange","e","target","type","id","accept","SheetJSFT","onChange","x","join","Spreadsheet","state","file","_this2","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","cellDates","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","raw","setState","get_cols","onLoadFile","readAsArrayBuffer","dragDropFile","dataInput","outTable","o","C","decode_range","_loop","encode_col","head","w","t","keys","filter","cellName","match","renderPlot","length","Plot","plot","getConfig","plotName","values","config","datasets","labels","slice","forEach","sequence","push","label","App","handleLoadFile","Fragment","spreadsheet","ReactDOM","render","src_App_0","document","getElementById","serviceWorker"],"mappings":"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","file":"static/js/main.368cc924.chunk.js","sourcesContent":["/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nimport React from \"react\";\n\nclass OutTable extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            {this.props.cols.map(c => (\n                                <th key={c.key}>{c.name}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.data.map((r, i) => (\n                            <tr key={i}>\n                                {this.props.cols.map(c => (\n                                    <td key={c.key}>{r[c.key]}</td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default OutTable;\n","/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nimport React from \"react\";\n\nclass DragDropFile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onDrop = this.onDrop.bind(this);\n    }\n    suppress(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    onDrop(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        const files = evt.dataTransfer.files;\n        if (files && files[0]) this.props.handleFile(files[0]);\n    }\n    render() {\n        return (\n            <div\n                onDrop={this.onDrop}\n                onDragEnter={this.suppress}\n                onDragOver={this.suppress}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default DragDropFile;\n","/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nimport React from \"react\";\n\nclass DataInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(e) {\n        const files = e.target.files;\n        if (files && files[0]) this.props.handleFile(files[0]);\n    }\n    render() {\n        return (\n            <form className=\"form-inline\">\n                <div className=\"form-group\">\n                    <input\n                        type=\"file\"\n                        className=\"form-control\"\n                        id=\"file\"\n                        accept={SheetJSFT}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            </form>\n        );\n    }\n}\n/* list of supported file types */\nconst SheetJSFT = [\n    \"xlsx\",\n    \"xlsb\",\n    \"xlsm\",\n    \"xls\",\n    \"xml\",\n    \"csv\",\n    \"txt\",\n    \"ods\",\n    \"fods\",\n    \"uos\",\n    \"sylk\",\n    \"dif\",\n    \"dbf\",\n    \"prn\",\n    \"qpw\",\n    \"123\",\n    \"wb*\",\n    \"wq*\",\n    \"html\",\n    \"htm\"\n]\n    .map(function(x) {\n        return \".\" + x;\n    })\n    .join(\",\");\n\nexport default DataInput;\n","/* xlsx.js (C) 2013-present  SheetJS -- http://sheetjs.com */\n/* Notes:\n   - usage: `ReactDOM.render( <SheetJSApp />, document.getElementById('app') );`\n   - xlsx.full.min.js is loaded in the head of the HTML page\n   - this script should be referenced with type=\"text/babel\"\n   - babel.js in-browser transpiler should be loaded before this script\n*/\n\nimport React from \"react\";\nimport XLSX from \"xlsx\";\nimport OutTable from \"./outTable\";\nimport DragDropFile from \"./dragDropFile\";\nimport DataInput from \"./dataInput\";\n\nclass Spreadsheet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [] /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */,\n            cols: [] /* Array of column objects e.g. { name: \"C\", K: 2 } */\n        };\n        this.handleFile = this.handleFile.bind(this);\n    }\n    handleFile(file /*:File*/) {\n        /* Boilerplate to set up FileReader */\n        const reader = new FileReader();\n        const rABS = !!reader.readAsBinaryString;\n        reader.onload = e => {\n            /* Parse data */\n            const bstr = e.target.result;\n            const wb = XLSX.read(bstr, {\n                type: rABS ? \"binary\" : \"array\",\n                cellDates: true\n            });\n            /* Get first worksheet */\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            /* Convert array of arrays */\n            const data = XLSX.utils.sheet_to_json(ws, {\n                header: 1,\n                raw: false\n            });\n            /* Update state */\n            this.setState({ data: data, cols: get_cols(ws) });\n            this.props.onLoadFile(this.state);\n        };\n        if (rABS) reader.readAsBinaryString(file);\n        else reader.readAsArrayBuffer(file);\n    }\n    render() {\n        return (\n            <DragDropFile handleFile={this.handleFile}>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <DataInput handleFile={this.handleFile} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <OutTable\n                            data={this.state.data}\n                            cols={this.state.cols}\n                        />\n                    </div>\n                </div>\n            </DragDropFile>\n        );\n    }\n}\n\n// if (typeof module !== \"undefined\") module.exports = SheetJSApp;\nexport default Spreadsheet;\n\n/* generate an array of all spreadsheet data */\nconst get_cols = ws => {\n    let o = [],\n        C = XLSX.utils.decode_range(ws[\"!ref\"]).e.c + 1;\n    for (var i = 0; i < C; ++i) {\n        const name = XLSX.utils.encode_col(i);\n        o[i] = {\n            name: name,\n            head: ws[name + \"1\"].w,\n            key: i,\n            type: ws[name + \"2\"].t,\n            data: Object.keys(ws)\n                .filter(cellName => cellName.match(name))\n                .map(cellName => ws[cellName].w)\n        };\n    }\n    return o;\n};\n","import React from \"react\";\nimport * as Plot from \"react-chartjs-2\";\n\nexport function renderPlot(cols) {\n    if (cols.length > 0) {\n        return getPlots().map((plot, i) => {\n            return React.createElement(\n                \"div\",\n                { className: \"col-md\", key: i },\n                React.createElement(plot, {\n                    key: i,\n                    data: getConfig(cols, plot.name)\n                })\n            );\n        });\n    }\n}\n\nfunction getConfig(cols, plotName) {\n    let config = {};\n    let values;\n    // TODO based on plotName you should create a different config. Use the Dispatch Tables: http://adripofjavascript.com/blog/drips/using-dispatch-tables-to-avoid-conditionals-in-javascript.html or https://medium.com/edge-coders/coding-tip-try-to-code-without-if-statements-d06799eed231 .\n\n    config.datasets = [];\n    values = cols.filter(o => o.type === \"s\");\n    if (values) config.labels = values[0].data.slice(1);\n    values = cols.filter(o => o.type === \"n\");\n    values.forEach(sequence =>\n        config.datasets.push({\n            label: sequence.data[0],\n            data: sequence.data.slice(1)\n        })\n    );\n\n    return config;\n}\n\nfunction getPlots() {\n    return [\n        Plot.Doughnut,\n        Plot.Pie,\n        Plot.Radar,\n        Plot.Bar,\n        Plot.HorizontalBar,\n        Plot.Line,\n        Plot.Polar,\n        Plot.Bubble,\n        Plot.Scatter\n    ];\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SheetJSApp from \"./services/spreadsheet\";\nimport { renderPlot } from \"./services/plot\";\n\nclass App extends React.Component {\n    state = {\n        data: [],\n        cols: []\n    };\n    handleLoadFile = state => {\n        this.setState(state);\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <SheetJSApp\n                    data={this.state.data}\n                    onLoadFile={this.handleLoadFile}\n                />\n                <div className=\"row\">{renderPlot(this.state.cols)}</div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from 'react-scripts/template/src/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}